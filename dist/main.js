!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__form-input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_active"};class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formEl=t}_showInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_clearInputError(e){const t=e.nextElementSibling;e.classList.remove("input-error"),t&&(t.textContent="")}_hasInvalidInput(){return this._inputEls.some((e=>!e.validity.valid))}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}toggleButtonState(e,t){if(this._hasInvalidInput(e))return this._submitButton.classList.add(this._inactiveButtonClass),void(this._submitButton.disabled=!0);this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_setEventListeners(){this._inputEls=[...this._formEl.querySelectorAll(this._inputSelector)],this._submitButton=this._formEl.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this.toggleButtonState(this._inputEls,this._submitButton)}))}))}resetValidation(){this._inputEls.forEach((e=>{this._clearInputError(e)})),this.toggleButtonState()}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e,t,s){let{name:n,link:r}=e;this._name=n,this._link=r,this._cardSelector=t,this._handleImageClick=s}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeIcon()})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteCard()})),this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}_handleLikeIcon(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}_handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._cardElement=this._getTemplate(),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardNameElement=this._cardElement.querySelector(".card__title"),this._cardNameElement.textContent=this._name,this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._setEventListeners(),this._cardElement}}class n{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("click",(e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close"))&&this.close()}))}}class r extends n{constructor(e,t){super({popupSelector:e}),this._handleFormSubmit=t,this._popupForm=this._popupElement.querySelector(".modal__form")}_getInputValues(){return this._inputList=this._popupElement.querySelectorAll(".modal__form-input"),this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}const i=document.querySelector("#profile-edit-modal").querySelector(".modal__form"),o=document.querySelector("#add-card-modal").querySelector(".modal__form"),a=document.querySelector(".profile__add-button"),l=document.querySelector("#profile-edit-button"),c=document.querySelector("#profile-title-input"),u=document.querySelector("#profile-description-input"),m=new t(e,i),d=new t(e,o),_=new class{constructor(e,t){let{items:s,renderer:n}=e;this._renderer=n,this._element=document.querySelector(t),this._items=s}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}appendItem(e){this._element.append(e)}clear(){this._element.innerHTML=""}addItem(e){this._element.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:e=>{const t=f(e);_.addItem(t)}},".cards__list");_.renderItems();const p=new class{constructor(e){let{nameSelector:t,descriptionSelector:s}=e;this._nameElement=document.querySelector(t),this._aboutElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,about:this._aboutElement.textContent}}setUserInfo(e){let{name:t,about:s}=e;this._nameElement.textContent=t,this._aboutElement.textContent=s}}({nameSelector:".profile__title",descriptionSelector:".profile__description"}),h=new r("#add-card-modal",(function(e){const t=f({name:e.title,link:e.url});_.addItem(t),o.reset(),h.close()}));h.setEventListeners();const E=new r("#profile-edit-modal",(function(e){p.setUserInfo({name:e.title,about:e.card__description}),E.close()}));E.setEventListeners(),a.addEventListener("click",(()=>{d.toggleButtonState(),h.open()})),l.addEventListener("click",(()=>{const e=p.getUserInfo();c.value=e.name,u.value=e.about,E.open()}));const v=new class extends n{constructor(e){super({popupSelector:e}),this._previewImage=this._popupElement.querySelector(".modal__image"),this._previewTitle=this._popupElement.querySelector(".modal__title")}open(e){this._previewImage.src=e.link,this._previewImage.alt=e.name,this._previewTitle.textContent=e.name,super.open()}}("#preview-modal");function S(e){v.open(e)}function f(e){return new s(e,"#card-template",S).getView()}v.setEventListeners(),m.enableValidation(),d.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,